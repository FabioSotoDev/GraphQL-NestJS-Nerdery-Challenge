// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  userType  UserType @default(CLIENT) @map("user_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Order        Order[]
  LikeUserBook LikeUserBook[]
  @@map("users")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  BookCategory BookCategory[]
  @@map("categories")
}

model Book {
  id        String   @id @default(uuid())
  title     String
  price     Decimal  @db.Decimal(12, 2)
  imageUrl  String   @default("https://avatars.githubusercontent.com/u/64451319?v=4") @map("image_url")
  stock     Int      @default(0)
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  OrderBook    OrderBook[]
  LikeUserBook LikeUserBook[]
  BookCategory BookCategory[]
  @@map("books")
}

model BookCategory {
  id         String   @id @default(uuid())
  bookId     String   @map("book_id")
  Book       Book     @relation(fields: [bookId], references: [id])
  categoryId String   @map("category_id")
  Category   Category @relation(fields: [categoryId], references: [id])

  @@map("books_categories")
}

model Order {
  id          String      @id @default(uuid())
  totalPrice  Decimal     @map("total_price") @db.Decimal(12, 2)
  paymentDay  DateTime?   @map("payment_day")
  orderStatus OrderStatus @default(PENDING) @map("order_status")
  userId      String      @map("user_id")
  User        User        @relation(fields: [userId], references: [id])
  OrderBook   OrderBook[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("orders")
}

model OrderBook {
  id        String   @id @default(uuid())
  price     Decimal  @db.Decimal(12, 2)
  quantity  Int      @default(1)
  orderId   String   @map("order_id")
  order     Order    @relation(fields: [orderId], references: [id])
  bookId    String   @map("book_id")
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order_books")
}

model LikeUserBook {
  id      String   @id @default(uuid())
  User    User?    @relation(fields: [userId], references: [id])
  userId  String?  @map("user_id")
  Book    Book?    @relation(fields: [bookId], references: [id])
  bookId  String?  @map("book_id")
  likedAt DateTime @default(now()) @map("liked_at")

  @@map("like_user_book")
}

enum UserType {
  CLIENT
  MANAGER
}

enum OrderStatus {
  PENDING
  FINISHED
  CANCELED
}
